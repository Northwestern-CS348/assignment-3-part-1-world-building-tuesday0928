"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where 
disk1 and disk2 (the smallest two) are on peg3, and
other disks are on peg1.

        |            |            |
        |            |            |
        |            |            |
        |            |            |
     ---|--- disk3   |            |
    ----|----        |           -|- disk1
   -----|----- disk5 |          --|-- disk2
==========================================
       peg1         peg2         peg3
       
Example: 
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

# OBJECTS
# there is a base
fact: (isA base1 base)

# there are disks
fact: (isA disk1 disk)
fact: (isA disk2 disk)
fact: (isA disk3 disk)
fact: (isA disk4 disk)
fact: (isA disk5 disk)

# there are pegs
fact: (isA peg1 peg)
fact: (isA peg2 peg)
fact: (isA peg3 peg)

# there are pegs on the base
fact: (attachedTo peg1 base1)
fact: (attachedTo peg2 base1)
fact: (attachedTo peg3 base1)


# RELATIONSHIPS
# there are disks on pegs
fact: (on disk5 peg1)
fact: (on disk4 peg1)
fact: (on disk3 peg1)
fact: (on disk2 peg3)
fact: (on disk1 peg3)

# there are disks on top of other disks
fact: (onTop disk1 disk2)
fact: (onTop disk3 disk4)
fact: (onTop disk4 disk5)

# pegs can be empty
fact: (empty peg2)

# disks are larger than other disks 
fact: (larger disk5 disk4)
fact: (larger disk4 disk3)
fact: (larger disk3 disk2)
fact: (larger disk2 disk1)

# there are disks on the top of a stack
fact: (top disk1 peg3)
fact: (top disk3 peg1)

# INFERENCES
# disk sizes
rule: ((isA ?d1 disk) (isA ?d2 disk) (isA ?d3 disk) (larger ?d1 ?d2) (larger ?d2 ?d3)) -> (larger ?d1 ?d3)

# CONSTRAINTS
rule: ((isA ?d disk) (isA ?p1 peg) (isA ?p2 peg) (top ?d ?p1) (empty ?p2)) -> (movable ?d ?p1 ?p2)

rule: ((isA ?d1 disk) (isA ?p1 peg) (isA ?d2 disk) (isA ?p2 peg) (top ?d1 ?p1) (top ?d2 ?p2) (larger ?d2 ?d1)) -> (movable ?d1 ?p1 ?p2)
